version: '3.8'

services:
  db:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: pokemon_user
      POSTGRES_PASSWORD: pokemon_pass
      POSTGRES_DB: pokemon_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations/init_pokemon_data.sql:/docker-entrypoint-initdb.d/init_pokemon_data.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pokemon_user -d pokemon_db"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - pokemon-network

  app:
    build: .
    restart: always
    environment:
      DATABASE_URL: postgresql://pokemon_user:pokemon_pass@db:5432/pokemon_db
      POSTGRES_USER: pokemon_user
      POSTGRES_PASSWORD: pokemon_pass
      POSTGRES_DB: pokemon_db
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - .:/app
    networks:
      - pokemon-network

  nginx:
    image: nginx:alpine
    restart: always
    ports:
      - "8080:80"     # Puerto HTTP alternativo
      - "8443:443"    # Puerto HTTPS alternativo
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/sites-available:/etc/nginx/sites-available
      - ./nginx/sites-enabled:/etc/nginx/sites-enabled
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    depends_on:
      - app
    networks:
      - pokemon-network

  certbot:
    image: certbot/certbot
    restart: unless-stopped
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

volumes:
  postgres_data:

networks:
  pokemon-network:
    driver: bridge 